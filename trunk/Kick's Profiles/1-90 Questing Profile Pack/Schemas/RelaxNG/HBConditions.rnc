default namespace = ""
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
# Original contribution by chinajade


BinaryOperator_Equalities =
  "=="
  | "!="

BinaryOperator_Conjunction =
  "||"
  | "&&"

BinaryOperator =
  BinaryOperator_Equalities
  | BinaryOperator_Conjunction
  | "<"
  | "<="
  | ">"  
  | ">="

Term-Classes =
  xsd:token { pattern="WoWClass\.(DeathKnight|Druid|Hunter|Mage|Monk|Paladin|Priest|Rogue|Shaman|Warlock|Warrior)" }
BinaryExpression |=
  list
  {
    "Me.Class",
    BinaryOperator_Equalities,
    Term-Classes
  }

Term-Faction =
  xsd:token { pattern="Me\.(IsAlliance|IsHorde)" }
Term |= Term-Faction

Term-HasAura =
  xsd:token { pattern="!?(Me\.)?HasAura\([0-9]+\)" }
Term |= Term-HasAura

Term-HasItem =
  xsd:token { pattern="!?HasItem\([0-9]+\)" }
Term |= Term-HasItem

Term-HasQuest =
  xsd:token { pattern="!?HasQuest\([0-9]+\)" }
Term |= Term-HasQuest

Term-HasSpell =
  xsd:token { pattern="!?HasSpell\([0-9]+\)" }
Term |= Term-HasSpell

Term-HasQuestAvailable =
  xsd:token { pattern="!?HasQuestAvailable\([0-9]+\)" }
Term |= Term-HasQuestAvailable

Term-IsObjectiveComplete =
  xsd:token { pattern="!?IsObjectiveComplete\([0-9], [0-9]+\)" }
Term |= Term-IsObjectiveComplete

Term-IsQuestCompleted =
  xsd:token { pattern="!?IsQuestCompleted\([0-9]+\)" }
Term |= Term-IsQuestCompleted

Term-Race =
  xsd:token { pattern="WoWRace\.(Draenei|Dwarf|Gnome|Human|NightElf|Pandaren|Worgen|BloodElf|Goblin|Orc|Tauren|Troll|Undead|Broken|FelOrc|ForestTroll|IceTroll|Naga|NorthrendSekeleton|Skeleton|Taunka|Tuskarr|Vrykul)" }
BinaryExpression |=
  list
  {
    "Me.Race",
    BinaryOperator_Equalities,
    Term-Race
  }

# Coin
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.(Copper|Gold|Silver)" },
    BinaryOperator,
    xsd:nonNegativeInteger
  }

# Level
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.Level" },
    BinaryOperator,
    HBType-Level
  }

# Positional
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.HearthstoneAreaId" },
    BinaryOperator,
    HBType-MapId
  }
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.MapId" },
    BinaryOperator,
    HBType-MapId
  }
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.[XYZ]" },
    BinaryOperator,
    xsd:decimal
  }
BinaryExpression |=
  list
  {
    xsd:token { pattern="Me\.ZoneId" },
    BinaryOperator,
    HBType-MapId
  }


# ********** HB **********

HBType-BinaryExpression =
  BinaryExpression
  | list { Term, BinaryOperator, Term }

HBType-Expression =
  Term
  | list { "(", Term, ")" }
  | HBType-BinaryExpression
  | list { "(", HBType-BinaryExpression, ")" }
  | list { HBType-BinaryExpression, BinaryOperator, HBType-BinaryExpression }
#  | list { Term, BinaryOperator, HBType-BinaryExpression }
#  | list { HBType-BinaryExpression, BinaryOperator, Term }

HBType-Condition =
  HBType-Expression
  
