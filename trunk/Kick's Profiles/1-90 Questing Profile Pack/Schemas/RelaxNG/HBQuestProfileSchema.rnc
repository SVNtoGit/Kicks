default namespace = ""
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
# Original contribution by chinajade

# TODO:
# * BehaviorFlags
# * CollectFrom
# * Break up Objective by type
# * CustomBehaviors


# ********** HONORBUDDY CORE GRAMMAR **********
start =
  element HBProfile {
    attribute xsi:noNamespaceSchemaLocation { text }?,
    (AvoidMobs
     | Blacklist
     | Blackspots
     | Mailboxes
     | MailBlue
     | MailGreen
     | MailGrey
     | MailPurple
     | MailWhite
     | MaxLevel
     | MinDurability
     | MinFreeBagSlots
     | MinLevel
     | Name
     | ProtectedItems
     | Quest
     | QuestOrder
     | SellBlue
     | SellGreen
     | SellGrey
     | SellPurple
     | SellWhite
     | TargetElites
     | TargetingDistance
     | Vendors
     )*
  }

AvoidMobs =
  element AvoidMobs {
    Mob*
  }

Blacklist =
  element Blacklist {
    Mob_Blacklist*
    | Object_Blacklist*
  }

Blackspot =
  element Blackspot {
    attribute Height { xsd:decimal }?,
    attribute Name { text }?,
    attribute Radius { xsd:decimal { minExclusive="0.0" } }?,
    LocationAttributes
  }

Blackspots =
  element Blackspots {
    Blackspot*
  }

Checkpoint =
  element Checkpoint {
    attribute Level { LevelValueDecimal }
  }

ClearMailbox =
  element ClearMailbox {
    empty
  }

ClearVendor =
  element ClearVendor {
    empty
  }

CollectFrom =
  element CollectFrom {
    (Mob
     | element GameObject {
         attribute Id { MobIdValue }?,
         attribute Name { text }?
       })*,
    (Vendor
     | element Gameobject {
         attribute Id { MobIdValue },
         attribute Name { text }
       }*
     | Object*)
  }

DisableBehavior =
  element DisableBehavior {
    attribute Name { text }
#    attribute Name { BehaviorFlagNames }
  }

DisableRepair =
  element DisableRepair {
    empty
  }

EnableBehavior =
  element EnableBehavior {
    attribute Name { text }
#    attribute Name { BehaviorFlagNames }
  }

EnableRepair =
  element EnableRepair {
    empty
  }

Factions =
  element Factions {
    list { MobIdValue+ }
  }

GrindArea =
  element GrindArea {
    Blacklist?
    & (Factions | MobIds)
    & Name?
    & TargetElites?
    & TargetMaxLevel?
    & TargetMinLevel?
    & Hotspots
  }

GrindTo =
  element GrindTo {
    attribute Condition { ConditionExpression }?,
    attribute GoalText { text }?,
    attribute Level { LevelValueDecimal }?,
    attribute Nav { NavValue }?
  }

Hotspot =
  element Hotspot {
    LocationAttributes
  }

Hotspot_Waypoint =
  element Hotspot {
    attribute Name { text }?,
#    attribute StartPoint { xsd:boolean }?,
#    attribute StartingPoint { xsd:boolean }?,
    LocationAttributes
  }

Hotspots =
  element Hotspots {
    Hotspot*
  }

If =
  element If {
    attribute Condition { ConditionExpression },
    (QuestOrder_Directives*
     | element Else {
	 QuestOrder_Directives*
       }
     | element ElseIf {
         attribute Condition { ConditionExpression },
	 QuestOrder_Directives*
       })+
  }

LootMobs =
  element LootMobs {
    attribute Value { MetaBooleanValue }
  }

Mailboxes =
  element Mailboxes {
    element Mailbox {
      attribute Name { text }?,
      attribute Nav { NavValue }?,
      LocationAttributes
    }*
  }

MailBlue =
  element MailBlue { BooleanValue }

MailGreen =
  element MailGreen { BooleanValue }

MailGrey =
  element MailGrey { BooleanValue }

MailPurple =
  element MailPurple { BooleanValue }

MailWhite =
  element MailWhite { BooleanValue }

MaxLevel =
  element MaxLevel { LevelValueInteger }

MinDurability =
   element MinDurability { xsd:decimal { minInclusive="0.0" } }

MinFreeBagSlots =
  element MinFreeBagSlots { xsd:nonNegativeInteger }

MinLevel =
  element MinLevel { LevelValueInteger }

Mob =
  element Mob {
    IdAttribute,
    attribute Name { text }?
  }

Mob_Blacklist =
  element Mob {
    attribute Flags { text }?,
#    attribute Flags { BehaviorFlagNames }
    IdAttribute,
    attribute Name { text }?
  }

MobIds =
  element MobIds {
    list { MobIdValue+ }
  }

MoveTo =
  element MoveTo {
    attribute DestName { text }?,
#    attribute Distance { xsd:integer }?,
#    attribute LocationName { text }?,
    attribute Name { xsd:NCName }?,
    attribute Nav { NavValue }?,
    attribute QuestId { QuestIdValue }?,
#    attribute WaitTime { xsd:integer }?,
    LocationAttributes
  }

Name = element Name { text }

Object =
  element Object {
    IdAttribute,
    attribute Name { text }
  }

Object_Blacklist =
  element Object {
    attribute Flags { text }?,
    attribute Id { MobIdValue },
    attribute Name { text }?
  }

Objective =
  element Objective {
    attribute CollectCount { xsd:integer }?,
    attribute CollectFrom { xsd:integer }?,
    attribute CollectionCount { xsd:integer }?,
    attribute GiverName { text }?,
    attribute ItemId { ItemIdValue }?,
    attribute ItemName { text }?,
    attribute KillCount { xsd:positiveInteger }?,
    attribute MobId { MobIdValue }?,
    attribute MobId2 { MobIdValue }?,
    attribute MobName { text }?,
    attribute MobState { xsd:NCName }?,
    attribute Name { text }?,
    attribute Nav { NavValue }?,
    attribute ObjectId { MobIdValue }?,
    attribute ObjectName { text }?,
    attribute QuestId { QuestIdValue }?,
    attribute QuestName { text }?,
    attribute TargetId { MobIdValue }?,
    attribute TargetType { xsd:NCName }?,
    attribute Type { xsd:NCName },
    attribute UseCount { xsd:positiveInteger }?,
    attribute WaitForNpcs { BooleanValue }?,
    LocationAttributes?,
    (TargetMinLevel, TargetMaxLevel)?,
    (CollectFrom
     | Hotspots
     | element MaximumHotspotTime { xsd:integer })*
  }

PickUp =
  element PickUp {
    attribute GiverId { MobIdValue },
    attribute GiverName { text }?,
    attribute GiverType { xsd:NCName }?,
    attribute Nav { NavValue }?,
    attribute QuestId { QuestIdValue },
    attribute QuestName { text }?,
    attribute Type { xsd:NCName }?,
    LocationAttributes?
  }

ProtectedItems =
  element ProtectedItems {
    element Item {
      IdAttribute,
      attribute Name { text }?
    }+
  }

Quest =
  element Quest {
    attribute Id { QuestIdValue },
    attribute Name { text }?,
    TurnIn?,
    CollectFrom?,
    Objective*
  }

QuestOrder =
  element QuestOrder {
    attribute IgnoreCheckpoints { BooleanValue }?,
    QuestOrder_Directives*
   }

QuestOrder_Directives =
  (Checkpoint
   | ClearMailbox
   | ClearVendor
   | CustomBehavior
   | DisableBehavior
   | DisableRepair
   | EnableBehavior
   | EnableRepair
   | GrindTo
   | If
   | LootMobs
   | MoveTo
   | Objective
   | PickUp
   | SetGrindArea
   | SetMailbox
   | SetVendor
   | TargetingDistance
   | TurnIn
   | UseItem
   | UseMount
   | While
  )+

SellBlue =
  element SellBlue { BooleanValue }

SellGreen =
  element SellGreen { BooleanValue }

SellGrey =
  element SellGrey { BooleanValue }

SellPurple =
  element SellPurple { BooleanValue }

SellWhite =
  element SellWhite { BooleanValue }

SetGrindArea =
  element SetGrindArea {
    GrindArea
  }

SetMailbox =
  element SetMailbox {
    Mailboxes
  }

SetVendor =
  element SetVendor {
    Vendors
  }

TargetingDistance =
  element TargetingDistance {
    attribute Value { MetaNonNegativeDecimalValue }?,
    text
  }

TargetElites = element TargetElites { BooleanValue }

TargetMinLevel = element TargetMinLevel { xsd:positiveInteger }

TargetMaxLevel = element TargetMaxLevel { xsd:positiveInteger }

TurnIn =
  element TurnIn {
    attribute Nav { NavValue }?,
    attribute NpcName { text }?,
    attribute QuestId { xsd:integer },
    attribute QuestName { text }?,
    attribute TurnInId { MobIdValue },
    attribute TurnInName { text }?,
    attribute TurnInType { xsd:NCName }?,
    LocationAttributes?
  }

UseItem =
  element UseItem {
    attribute ItemId { ItemIdValue },
    attribute ItemName { text }?,
    attribute Name { text }?,
    attribute Nav { NavValue }?,
    attribute NumOfTimes { xsd:positiveInteger }?,
    attribute QuestId { QuestIdValue },
    attribute QuestName { text }?,
    attribute TargetId { MobIdValue }?,
    attribute TargetType { xsd:NCName }?,
    attribute WaitTime { xsd:integer { minInclusive="1" } }?,
    LocationAttributes
  }

UseMount =
  element UseMount {
    attribute Value { MetaBooleanValue }
  }

Vendor =
  element Vendor {
    IdAttribute,
    attribute Name { text },
    attribute Nav { NavValue }?,
    attribute TrainClass { TrainClassValue }?,
    attribute Type { VendorTypeValue }?,
    LocationAttributes?
  }

Vendors =
  element Vendors {
    Vendor*
  }

While =
  element While {
    attribute Condition { ConditionExpression },
    QuestOrder_Directives*
  }


# ********** Synthetic nodes **********

BehaviorFlagName =
  "Combat"
  | "Loot"
  | "Pull"

#BehaviorFlagNames =
#  | BehaviorFlagName ("," BehaviorFlagName )*

BooleanValue =
  "False"
  | "True"

ConditionExpression =
  text

IdAttribute =
  attribute Entry { xsd:positiveInteger }
  | attribute Id { MobIdValue }

ItemIdValue =
  xsd:positiveInteger

LevelValueInteger =
  xsd:positiveInteger

LevelValueDecimal =
  xsd:decimal { minInclusive="1.0" }

LocationAttributes =
  attribute X { xsd:decimal },
  attribute Y { xsd:decimal },
  attribute Z { xsd:decimal }

MetaBooleanValue =
  BooleanValue
  | "null"

MetaDecimalValue =
  xsd:decimal
  | "null"

MetaNonNegativeDecimalValue =
  xsd:decimal { minInclusive="0.0" }
  | "null"

MobIdValue =
  xsd:positiveInteger

NavValue =
  "Fly"
  | "Run"

TrainClassValue =
  "Deathknight"
  | "Druid"
  | "Hunter"
  | "Mage"
  | "Monk"
  | "Paladin"
  | "Priest"
  | "Rogue"
  | "Shaman"
  | "Warlock"
  | "Warrior"

QuestIdValue =
  xsd:positiveInteger

VendorTypeValue =
  "Food"
  | "Repair"
  | "Train"


# ********** CUSTOM BEHAVIORS **********
include "HBCustomBehaviors.rnc"
